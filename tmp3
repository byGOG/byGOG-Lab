}

function setupSearch() {
  const input = document.getElementById("search-input");
  const status = document.getElementById("search-status");
  const nodes = Array.from(document.querySelectorAll(".category-card li"));
  if (!input || !status || !nodes.length) return;

  nodes.forEach((el, index) => {
    el.dataset.searchIndex = String(index);
  });

  const dataset = nodes.map((el, index) => {
    const raw = el.dataset.search || el.textContent || "";
    const catEl = el.closest('.category-card');
    const subEl = el.closest('.sub-category');
    return {
      index,
      folded: el.dataset.folded ? String(el.dataset.folded) : foldForSearch(raw),
      isLink: !!el.querySelector(".link-text"),
      catEl,
      subEl
    };
  });

  let engine = null;
  const getEngine = () => {
    if (engine) return engine;
    engine = createWorkerSearchEngine(nodes, dataset, status) || createSyncSearchEngine(nodes, dataset, status);
    return engine;
  };

  let debounceTimer;
  function computeDelay(val){
    const n = (String(val||"").trim()).length;
    if (n >= 8) return 80;
    if (n >= 4) return 120;
    return 250;
  }

  function runImmediate(value) {
    clearTimeout(debounceTimer);
    getEngine().run(value);
  }

  input.addEventListener("input", () => {
    clearTimeout(debounceTimer);
    const delay = computeDelay(input.value);
    debounceTimer = setTimeout(() => {
      getEngine().run(input.value);
      try {
        const url = new URL(window.location.href);
        const v = (input.value || "").trim();
        if (v) url.searchParams.set("q", v); else url.searchParams.delete("q");
        history.replaceState(null, "", url.toString());
      } catch {}
    }, delay);
  });

  document.addEventListener("keydown", ev => {
    const t = ev.target;
    const tag = t && t.tagName ? t.tagName.toUpperCase() : "";
    const inEditable = !!(t && (t.isContentEditable || ["INPUT", "TEXTAREA", "SELECT"].includes(tag)));

    if ((ev.ctrlKey || ev.metaKey) && !ev.altKey && !ev.shiftKey && (ev.key === "k" || ev.key === "K")) {
      ev.preventDefault();
      input.focus();
      input.select();
      return;
    }

    if (ev.ctrlKey && !ev.altKey && !ev.shiftKey && (ev.key === "e" || ev.key === "E")) {
      ev.preventDefault();
      input.focus();
      input.select();
      return;
    }

    if (ev.key === "/" && !(ev.ctrlKey || ev.metaKey || ev.altKey || ev.shiftKey)) {
      if (inEditable) return;
      ev.preventDefault();
      input.focus();
      input.select();
    }
  });

  input.addEventListener("keydown", ev => {
    if (ev.key === "Escape") {
      if (input.value) {
        input.value = "";
        runImmediate("");
        try {
          const url = new URL(window.location.href);
          url.searchParams.delete("q");
          history.replaceState(null, "", url.toString());
        } catch {}
      }
      ev.stopPropagation();
    } else if (ev.key === "Enter") {
      const q = (input.value || "").trim();
      if (!q) return;
      const firstLink = document.querySelector('.category-card li:not([style*="display: none"]) a[href]');
      if (firstLink) {
        firstLink.click();
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  });

  try {
    const urlQ = new URL(window.location.href).searchParams.get("q");
    if (urlQ) {
      input.value = urlQ;
      runImmediate(urlQ);
    } else if (input.value) {
      runImmediate(input.value);
    }
  } catch {
    if (input.value) runImmediate(input.value);
  }

  // Lazy-load icons with IntersectionObserver
  try {
    const io = 'IntersectionObserver' in window ? new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          const src = img.getAttribute('data-src');
          if (src) {
            img.src = src;
            img.removeAttribute('data-src');
          }
          io.unobserve(img);
        }
      });
    }, { rootMargin: '200px 0px' }) : null;
    if (io) {
      document.querySelectorAll('img.site-icon[data-src]').forEach(img => io.observe(img));
    }
  } catch {}
}



function setupThemeToggle() {
  try { const c = document.querySelector('.theme-toggle-container'); if (c) c.remove(); } catch {}
  try { document.body.classList.add('koyu'); } catch {}
  return;
  const btn = document.getElementById("theme-toggle");
  const body = document.body;
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");

  function apply(isDark) {
    const dark = !!isDark;
    if (dark) {
      body.classList.add("koyu");
      btn.textContent = "☀️";
      btn.setAttribute("aria-label", "Aydınlık temaya geç");
    } else {
      body.classList.remove("koyu");
      btn.textContent = "🌙";
      btn.setAttribute("aria-label", "Koyu temaya geç");
    }
    btn.setAttribute("aria-pressed", String(dark));
  }

  btn.addEventListener("click", () => {
    const willDark = !body.classList.contains("koyu");
    apply(willDark);
    localStorage.setItem("theme", willDark ? "koyu" : "aydinlik");
  });

  let pref = localStorage.getItem("theme");
  if (!pref) pref = prefersDark.matches ? "koyu" : "aydinlik";
  apply(pref === "koyu");
  prefersDark.addEventListener("change", e => {
    if (!localStorage.getItem("theme")) apply(e.matches);
  });
}

document.addEventListener("DOMContentLoaded", async () => {
  setupThemeToggle();
  const container = document.getElementById("links-container");
  try {
    const data = await fetchLinks();
    renderCategories(data, container);
  } catch (err) {
    container.textContent = "Bağlantılar yüklenemedi.";
    console.error(err);
  }
  setupCopyDelegation();
  setupSearch();
  setupPWAInstallUI();
  if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
      navigator.serviceWorker.register("sw.js").then(
        reg => console.log("ServiceWorker registration successful with scope:", reg.scope),
        err => console.log("ServiceWorker registration failed:", err)
      );
      // Auto-reload when a new service worker takes control (ensures fresh content)
      try {
        navigator.serviceWorker.addEventListener("controllerchange", () => {
          window.location.reload();
        });
      } catch {}
    });
  }
});

// PWA install prompt handling and UI
function setupPWAInstallUI() {
  const state = { deferred: null, installed: false };
  const cfg = { delayMs: 4500, minScroll: 200, snoozeDays: 7 };
  const isStandalone = () => (window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) || (window.navigator && window.navigator.standalone);
  const isAllowedPath = () => {
    try {
      const p = new URL(window.location.href).pathname;
      return /(?:^|\/)index\.html$/.test(p) || /\/$/.test(p);
    } catch { return true; }
  };
  const isSnoozed = () => {
    try { const until = Number(localStorage.getItem('pwaDismissUntil')||'0'); return Date.now() < until; } catch { return false; }
  };
  const snooze = () => { try { localStorage.setItem('pwaDismissUntil', String(Date.now() + cfg.snoozeDays*86400000)); } catch {} };

  const createCard = () => {
    const card = document.createElement('div');
    card.className = 'install-card';
    card.setAttribute('role', 'dialog');
    card.setAttribute('aria-live', 'polite');
    card.setAttribute('aria-label', 'Uygulamayı yükle');

    const icon = document.createElement('img');
    icon.className = 'install-icon';
    icon.src = 'icon/bygog-lab-icon.svg';
    icon.alt = '';
    icon.width = 40; icon.height = 40;

    const textWrap = document.createElement('div');
    textWrap.className = 'install-text';
    const title = document.createElement('div');
    title.className = 'install-title';
    title.textContent = 'byGOG\'u yükle';
    const sub = document.createElement('div');
    sub.className = 'install-sub';
    sub.textContent = 'Hızlı erişim için ana ekrana ekle';
    textWrap.appendChild(title);
    textWrap.appendChild(sub);

