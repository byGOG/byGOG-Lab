export async function fetchLinks() {
  const res = await fetch("dist/links.json");
  if (!res.ok) throw new Error("links.json yüklenemedi");
  return res.json();
}

const WINUTIL_COMMAND = 'irm "https://christitus.com/win" | iex';

function resolveCopyValue(link) {
  if (link && link.copyText) return String(link.copyText);
  const name = String(link?.name || "").toLocaleLowerCase("tr");
  const url = String(link?.url || "");
  if (name === "winutil" || url.includes("christitus.com/win")) {
    return WINUTIL_COMMAND;
  }
  return "";
}

function createLinkItem(link) {
  const li = document.createElement("li");
  const a = document.createElement("a");
  a.href = link.url;
  a.target = "_blank";
  a.rel = "noopener noreferrer";

  if (link.recommended) {
    const star = document.createElement("span");
    star.className = "star";
    star.title = "Önerilen";
    star.setAttribute("aria-label", "Önerilen");
    star.setAttribute("aria-hidden", "true");
    star.textContent = "⭐";
    a.appendChild(star);
  }

  if (link.icon) {
    const wrap = document.createElement("span");
    wrap.className = "icon-wrapper";
    const img = document.createElement("img");
    img.loading = "lazy";
    img.decoding = "async";
    img.width = 28;
    img.height = 28;
    img.setAttribute('data-src', link.icon);
    img.src = "icon/fallback.svg";
    img.onerror = () => {
      if (img.src && !img.src.endsWith("/icon/fallback.svg") && !img.src.endsWith("icon/fallback.svg")) {
        img.src = "icon/fallback.svg";
      }
    };
    if (link.alt) img.alt = link.alt;
    img.className = "site-icon";
    wrap.appendChild(img);
    a.appendChild(wrap);
  }

  const text = document.createElement("span");
  text.className = "link-text";
  text.textContent = link.name;
  li.dataset.nameOriginal = link.name || "";
  a.appendChild(text);

  if (link.description) {
    const tip = document.createElement("span");
    tip.className = "custom-tooltip";
    if (link.icon) {
      const tipImg = document.createElement("img");
      tipImg.loading = "lazy";
      tipImg.decoding = "async";
      tipImg.width = 28;
      tipImg.height = 28;
      tipImg.setAttribute('data-src', link.icon);
      tipImg.onerror = () => {
        if (tipImg.src && !tipImg.src.endsWith("/icon/fallback.svg") && !tipImg.src.endsWith("icon/fallback.svg")) {
          tipImg.src = "icon/fallback.svg";
        }
      };
      if (link.alt) tipImg.alt = link.alt;
      tip.appendChild(tipImg);
    }
    tip.appendChild(document.createTextNode(link.description));

    a.appendChild(tip);
    // Lazy-load tooltip image on demand (hover/focus)
    const loadTipImg = () => {
      try {
        const ti = tip.querySelector('img[data-src]');
        if (ti) { ti.src = ti.getAttribute('data-src'); ti.removeAttribute('data-src'); }
      } catch {}
    };
    a.addEventListener('mouseenter', loadTipImg, { once: true });
    a.addEventListener('focusin', loadTipImg, { once: true });
  }

  try {
    const parts = [];
    if (link.name) parts.push(link.name);
    if (Array.isArray(link.tags) && link.tags.length) parts.push(link.tags.join(" "));
    li.dataset.search = parts.join(" ").toLocaleLowerCase("tr");
    try { if (link.folded) li.dataset.folded = String(link.folded); } catch {}
    if (link.description) li.dataset.descOriginal = link.description;
  } catch {}

  li.appendChild(a);

  const copyValue = resolveCopyValue(link);

  if (copyValue) {
    li.classList.add("has-copy");
    const copyButton = document.createElement("button");
    copyButton.type = "button";
    copyButton.className = "copy-button";
    const defaultLabel = "Komutu kopyala";
    const successLabel = "Komut kopyalandı";
    const errorLabel = "Komut kopyalanamadı";
    const loadingLabel = "Komut kopyalanıyor";

    const srLabel = document.createElement("span");
    srLabel.className = "sr-only";
    srLabel.textContent = defaultLabel;

    const icon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    icon.setAttribute("viewBox", "0 0 24 24");
    icon.setAttribute("aria-hidden", "true");
    icon.setAttribute("focusable", "false");

    const iconShapes = {
      copy: '<rect x="9" y="9" width="12" height="12" rx="2" ry="2"></rect><path d="M5 15V5a2 2 0 0 1 2-2h10"></path>',
      success: '<path d="M20 6 10 16l-4-4"></path>',
      error: '<path d="M18 6 6 18"></path><path d="M6 6l12 12"></path>',
      loading: '<circle cx="12" cy="12" r="9" stroke-opacity="0.25"></circle><path d="M21 12a9 9 0 0 0-9-9" stroke-opacity="0.9"></path>'
    };

    const setIcon = name => {
      icon.innerHTML = iconShapes[name] || iconShapes.copy;
    };

    setIcon("copy");

    copyButton.appendChild(icon);
    copyButton.appendChild(srLabel);

    const baseAriaLabel = `${link.name || ""} komutunu kopyala`.trim() || defaultLabel;
    copyButton.setAttribute("aria-label", baseAriaLabel);
    copyButton.title = "Komutu panoya kopyala";

    // Store labels and value for delegated handler
    copyButton.dataset.copy = copyValue;
    copyButton.dataset.labelDefault = defaultLabel;
    copyButton.dataset.labelSuccess = successLabel;
    copyButton.dataset.labelError = errorLabel;
    copyButton.dataset.labelLoading = loadingLabel;
    copyButton.dataset.ariaBase = baseAriaLabel;

    a.appendChild(copyButton);
  }

  return li;
}

function renderCategories(data, container) {
  const frag = document.createDocumentFragment();
  data.categories.forEach(cat => {
    const card = document.createElement("div");
    card.className = "category-card";

    const h2 = document.createElement("h2");
    h2.textContent = cat.title;
    card.appendChild(h2);

    const renderList = (links, parent) => {
      const ul = document.createElement("ul");
      // Sort inside groups alphabetically (tr): recommended A–Z, others A–Z
      const cmp = (a, b) => String(a.name || "").localeCompare(String(b.name || ""), "tr");
      const rec = links.filter(item => !!item.recommended).sort(cmp);
      const others = links.filter(item => !item.recommended).sort(cmp);
      const sorted = [...rec, ...others];
      let addedRecLabel = false;
      let addedOtherLabel = false;
      const hasRec = sorted.some(x => !!x.recommended);
      const hasOther = sorted.some(x => !x.recommended);
      sorted.forEach(item => {
        if (hasRec && hasOther && item.recommended && !addedRecLabel) {
          const lbl = document.createElement("li");
          lbl.className = "group-label";
          lbl.setAttribute("role", "presentation");
          lbl.textContent = "Önerilenler";
          ul.appendChild(lbl);
          addedRecLabel = true;
        }
        if (hasRec && hasOther && !item.recommended && !addedOtherLabel) {
          const lbl = document.createElement("li");
          lbl.className = "group-label";
          lbl.setAttribute("role", "presentation");
          lbl.textContent = "Diğerleri";
          ul.appendChild(lbl);
          addedOtherLabel = true;
        }
        ul.appendChild(createLinkItem(item));
      });
      parent.appendChild(ul);
    };

    if (cat.subcategories) {
      const subWrap = document.createElement("div");
      subWrap.className = "sub-category-container";
      cat.subcategories.forEach(sub => {
        const sc = document.createElement("div");
        sc.className = "sub-category";
        const h3 = document.createElement("h3");
        h3.textContent = sub.title;
        sc.appendChild(h3);
        renderList(sub.links, sc);
        subWrap.appendChild(sc);
      });
      card.appendChild(subWrap);
    } else if (cat.links) {
      renderList(cat.links, card);
    }

    frag.appendChild(card);
  });
  container.appendChild(frag);
}



const COPY_ICON_SHAPES = {
  copy: '<rect x="9" y="9" width="12" height="12" rx="2" ry="2"></rect><path d="M5 15V5a2 2 0 0 1 2-2h10"></path>',
  success: '<path d="M20 6 10 16l-4-4"></path>',
  error: '<path d="M18 6 6 18"></path><path d="M6 6l12 12"></path>',
  loading: '<circle cx="12" cy="12" r="9" stroke-opacity="0.25"></circle><path d="M21 12a9 9 0 0 0-9-9" stroke-opacity="0.9"></path>'
};

function setCopyIconOnButton(btn, name) {
  const svg = btn.querySelector('svg');
  if (svg) svg.innerHTML = COPY_ICON_SHAPES[name] || COPY_ICON_SHAPES.copy;
}

async function copyToClipboard(text) {
  if (navigator.clipboard && navigator.clipboard.writeText) {
    await navigator.clipboard.writeText(text);
  } else {
    const temp = document.createElement('textarea');
    temp.value = text;
    temp.setAttribute('readonly', '');
    temp.style.position = 'fixed';
    temp.style.opacity = '0';
    document.body.appendChild(temp);
    temp.select();
